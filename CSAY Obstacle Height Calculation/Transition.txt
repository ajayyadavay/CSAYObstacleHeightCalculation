public void Calculate_Transitional_Surface()
        {
            //For approach equation i.e. slope and intercepts
            //Equation of line parallel to AB i.e. IJ and GH
            double slope1, intercept1, distanceOffset;
            double Slope_Trans, Len_of_InnerEdge_Ap, Height_Hz;

            Slope_Trans = Convert.ToDouble(dataGridView5.Rows[25].Cells[2].Value); //14.3;
            Len_of_InnerEdge_Ap = Convert.ToDouble(dataGridView5.Rows[12].Cells[2].Value); //280.0;
            Height_Hz = Convert.ToDouble(dataGridView5.Rows[4].Cells[2].Value); //45.0;

            double[] distanceOffset1 = new double[1]{ 0.5 * Len_of_InnerEdge_Ap + Height_Hz * 100.0/Slope_Trans };//314.68 = 45/14.3%
            //45/14.3% = 314.68
            double[] intercept_parallel = new double[10];
            double a, b, x1, y1, x2, y2;
            string[] Trans_Line_Name = new string[2] { "Trans_JK", "Trans_IL" };

            int DGV2_row_inx, DGV1_row_inx, i, intrcpt;
            int a1, a2;
            slope1 = Convert.ToDouble(dataGridView2.Rows[4].Cells["ColSlope"].Value);//EF
            double tempslope;
            tempslope = Math.Atan(slope1);
            if(tempslope>=0)
            {
                a1 = -1;
                a2 = 1;
            }
            else
            {
                a1 = 1;
                a2 = -1;
            }
            int[] mulfactor = new int[2] { a1, a2 };//1 for T_AD and -1 for T_BC
            int[] RW_Side = new int[1] { 4 };

            
            intrcpt = 0;
            DGV2_row_inx = 39; //for Trans_AB and end at index 40 for Trans_KJ
            for (int j = 0; j <= 1; j++)
            {
                slope1 = Convert.ToDouble(dataGridView2.Rows[RW_Side[0]].Cells["ColSlope"].Value);//EF
                intercept1 = Convert.ToDouble(dataGridView2.Rows[RW_Side[0]].Cells["ColIntercept"].Value);//EF

                for (int k = 0; k <= 0; k++)
                {
                    //For Trans_DE--->RWY 28 side
                    distanceOffset = distanceOffset1[k];
                    intercept_parallel[intrcpt] = Intercept_of_Parallel_line(slope1, intercept1, distanceOffset, mulfactor[j]);
                    dataGridView2.Rows[DGV2_row_inx].Cells["ColLine"].Value = Trans_Line_Name[intrcpt];
                    dataGridView2.Rows[DGV2_row_inx].Cells["ColSlope"].Value = slope1.ToString();
                    dataGridView2.Rows[DGV2_row_inx].Cells["ColIntercept"].Value = intercept_parallel[intrcpt].ToString();

                    DGV2_row_inx++;
                    intrcpt++;
                }
            }

            //Find intersection point T_A, T_D, T_B, T_C
            //Point of intersection of circle and line
            double Quad_x_plus, Quad_x_minus, Quad_y_plus, Quad_y_minus;
            double dist;
            double slope2, intercept2;
            double[] Trans_COORD_X = new double[12];
            double[] Trans_COORD_Y = new double[12];
            string[] Trans_Point_Name = new string[4] { "Trans_J", "Trans_K", "Trans_I", "Trans_L" };
            double[] latlong1 = new double[2];
            int[,] indx = new int[2,2] { { 13, 15 }, { 14, 16 } };
            double[,] slopes = new double[2,2];
            double[,] intercepts = new double[2,2];

            x1 = Convert.ToDouble(dataGridView1.Rows[6].Cells[4].Value);//J
            y1 = Convert.ToDouble(dataGridView1.Rows[6].Cells[5].Value);//J
            x2 = Convert.ToDouble(dataGridView1.Rows[8].Cells[4].Value);//O
            y2 = Convert.ToDouble(dataGridView1.Rows[8].Cells[5].Value);//O
            slopes[0,0] = Find_Slope_Of_Equation(x1, y1, x2, y2);
            intercepts[0,0] = Find_Intercept_Of_Equation(slopes[0, 0], x1, y1);

            x1 = Convert.ToDouble(dataGridView1.Rows[7].Cells[4].Value);//I
            y1 = Convert.ToDouble(dataGridView1.Rows[7].Cells[5].Value);//I
            x2 = Convert.ToDouble(dataGridView1.Rows[9].Cells[4].Value);//P
            y2 = Convert.ToDouble(dataGridView1.Rows[9].Cells[5].Value);//P
            slopes[0, 1] = Find_Slope_Of_Equation(x1, y1, x2, y2);
            intercepts[0, 1] = Find_Intercept_Of_Equation(slopes[0, 1], x1, y1);

            x1 = Convert.ToDouble(dataGridView1.Rows[14].Cells[4].Value);//K
            y1 = Convert.ToDouble(dataGridView1.Rows[14].Cells[5].Value);//K
            x2 = Convert.ToDouble(dataGridView1.Rows[16].Cells[4].Value);//V
            y2 = Convert.ToDouble(dataGridView1.Rows[16].Cells[5].Value);//V
            slopes[1, 0] = Find_Slope_Of_Equation(x1, y1, x2, y2);
            intercepts[1, 0] = Find_Intercept_Of_Equation(slopes[1, 0], x1, y1);

            x1 = Convert.ToDouble(dataGridView1.Rows[15].Cells[4].Value);//L
            y1 = Convert.ToDouble(dataGridView1.Rows[15].Cells[5].Value);//L
            x2 = Convert.ToDouble(dataGridView1.Rows[17].Cells[4].Value);//U
            y2 = Convert.ToDouble(dataGridView1.Rows[17].Cells[5].Value);//U
            slopes[1, 1] = Find_Slope_Of_Equation(x1, y1, x2, y2);
            intercepts[1, 1] = Find_Intercept_Of_Equation(slopes[1, 1], x1, y1);

            DGV1_row_inx = 42;//for Trans_A and end at index 45 for Trans_J
            //PtIndex = 0;
            i = 0;
            intrcpt = 0;

            for (int j = 0; j <= 1; j++)
            {
                intercept1 = intercept_parallel[j]; //intercept of Trans_AB i.e. parallel line
                slope1 = Convert.ToDouble(dataGridView2.Rows[4].Cells["ColSlope"].Value);//EF

                for (int k = 0; k <= 1; k++)
                {
                    slope2 = Convert.ToDouble(dataGridView2.Rows[indx[j,k]].Cells["ColSlope"].Value);//slope
                    intercept2 = Convert.ToDouble(dataGridView2.Rows[indx[j,k]].Cells["ColIntercept"].Value);//intercept                                                                                                //For Point Trans_A and Trans_B

                    //slope2 = slopes[j, k];
                    //intercept2 = intercepts[j, k];

                    a = Find_Intersection_X(slope1, intercept1, slope2, intercept2);//X-COORD of intersection of EF and IJ
                    b = Find_Intersection_Y(slope1, intercept1, slope2, intercept2);//Y-COORD of intersection of EF and IJ

                    //COORD Trans_A
                    Trans_COORD_X[i] = a;
                    Trans_COORD_Y[i] = b;
                    //COORD Trans_B
                    //Trans_COORD_X[i + 1] = Quad_x_minus;
                    //Trans_COORD_Y[i + 1] = Quad_y_minus;


                    latlong1 = Convert_UTM_To_Latitude_Longitude(a, b);
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColPoint"].Value = Trans_Point_Name[i].ToString();
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColLatitude"].Value = latlong1[0].ToString();
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColLongitude"].Value = latlong1[1].ToString();
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColEasting"].Value = a.ToString();
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColNorthing"].Value = b.ToString();

                    DGV1_row_inx++;
                    i++;
                    intrcpt++;
                }

            }

            //distance between two points
            DGV2_row_inx = 39;
            for (int k =0; k<=3; k +=2)
            {
                Quad_x_plus = Trans_COORD_X[k];
                Quad_y_plus = Trans_COORD_Y[k];

                Quad_x_minus = Trans_COORD_X[k+1];
                Quad_y_minus = Trans_COORD_Y[k+1];
                
                dist = Find_Distance_bet_two_pointXY(Quad_x_plus, Quad_y_plus, Quad_x_minus, Quad_y_minus);
                dataGridView2.Rows[DGV2_row_inx].Cells[3].Value = dist.ToString();
                DGV2_row_inx++;

            }
            //----------------------------------------------------------------------------------------------
            //JK

            x1 = Convert.ToDouble(dataGridView1.Rows[6].Cells[4].Value);//J
            y1 = Convert.ToDouble(dataGridView1.Rows[6].Cells[5].Value);//J
            x2 = Convert.ToDouble(dataGridView1.Rows[14].Cells[4].Value);//K
            y2 = Convert.ToDouble(dataGridView1.Rows[14].Cells[5].Value);//K

            slope1 = Find_Slope_Of_Equation(x1, y1, x2, y2);
            intercept1 = Find_Intercept_Of_Equation(slope1, x1, y1);
            dist = Find_Distance_bet_two_pointXY(x1, y1, x2, y2);

            dataGridView2.Rows[41].Cells[0].Value = "Trans_JK";
            dataGridView2.Rows[41].Cells[1].Value = slope1.ToString();
            dataGridView2.Rows[41].Cells[2].Value = intercept1.ToString();
            dataGridView2.Rows[41].Cells[3].Value = dist.ToString();

            //IL
            x1 = Convert.ToDouble(dataGridView1.Rows[7].Cells[4].Value);//J
            y1 = Convert.ToDouble(dataGridView1.Rows[7].Cells[5].Value);//J
            x2 = Convert.ToDouble(dataGridView1.Rows[15].Cells[4].Value);//K
            y2 = Convert.ToDouble(dataGridView1.Rows[15].Cells[5].Value);//K

            slope1 = Find_Slope_Of_Equation(x1, y1, x2, y2);
            intercept1 = Find_Intercept_Of_Equation(slope1, x1, y1);
            dist = Find_Distance_bet_two_pointXY(x1, y1, x2, y2);

            dataGridView2.Rows[42].Cells[0].Value = "Trans_LI";
            dataGridView2.Rows[42].Cells[1].Value = slope1.ToString();
            dataGridView2.Rows[42].Cells[2].Value = intercept1.ToString();
            dataGridView2.Rows[42].Cells[3].Value = dist.ToString();

        }




























//TRANSITIONAL SURFACE
                if (plotCase == 1 || plotCase == 2 || plotCase == 3 || plotCase == 5 || plotCase == 6 || plotCase == 7)
                {
                    int TransPlot_case;
                    double perp_dist_TOC = 0;

                    TransPlot_case = Transitional_Case_of_Plot_COORD(Final_Easting_X, Final_Northing_Y);
                    if (TransPlot_case == 500 || TransPlot_case == 600)
                    {
                        if (TransPlot_case == 500)
                        {
                            //Find perpendicular distance from obstacle point to Approach line IJ
                            //equation TOC_AB
                            m = Convert.ToDouble(dataGridView2.Rows[41].Cells[1].Value);//slope of Trans_JK
                            c = Convert.ToDouble(dataGridView2.Rows[41].Cells[2].Value);//intercept of Trans_JK
                            perp_dist_TOC = Math.Abs(m * Final_Easting_X - Final_Northing_Y + c) / Math.Sqrt(m * m + 1.0 * 1.0);
                        }
                        else if (TransPlot_case == 600)
                        {
                            //equation Trans_LI
                            m = Convert.ToDouble(dataGridView2.Rows[42].Cells[1].Value);//slope of TOC_GH
                            c = Convert.ToDouble(dataGridView2.Rows[42].Cells[2].Value);//intercept of TOC_GH
                            perp_dist_TOC = Math.Abs(m * Final_Easting_X - Final_Northing_Y + c) / Math.Sqrt(m * m + 1.0 * 1.0);
                        }

                        SurfaceHeight = 0.0 + 14.3 / 100.0 * (perp_dist_TOC - 0.0);
                        AllowableElev_Obs = RL_RWY + SurfaceHeight;
                        SurfaceName = "TRANSITIONAL SURFACE";

                        //adding data to datagridview4
                        dataGridView4.Rows.Add();
                        SurfaceCount++;
                        dataGridView4.Rows[SurfaceCount - 1].Cells[0].Value = SurfaceCount.ToString();
                        dataGridView4.Rows[SurfaceCount - 1].Cells[1].Value = SurfaceName;
                        dataGridView4.Rows[SurfaceCount - 1].Cells[2].Value = SurfaceHeight.ToString("0.000");
                        dataGridView4.Rows[SurfaceCount - 1].Cells[3].Value = AllowableElev_Obs.ToString("0.000");
                        dataGridView4.Rows[SurfaceCount - 1].Cells[4].Value = RL_RWY + " + (14.3% * (" + perp_dist_TOC.ToString("0.000") + " - 0.0)) = " + AllowableElev_Obs.ToString("0.000");

                    }
                }