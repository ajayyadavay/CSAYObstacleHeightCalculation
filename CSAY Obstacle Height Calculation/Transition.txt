public void Calculate_Inner_Transition_Surface_Lower_Inner_ApproachEnd()
        {
            //For Inner transition equation i.e. slope and intercepts 
            //Equation of line parallel to AB i.e. IJ and GH
            double slope1, intercept1, distanceOffset;
            double Slope_IT, Len_of_InnerEdge_Ap, Height_Hz;

            Slope_IT = Convert.ToDouble(dataGridView5.Rows[27].Cells[2].Value); //33.3;
            Len_of_InnerEdge_Ap = Convert.ToDouble(dataGridView5.Rows[12].Cells[2].Value); //280.0;
            Height_Hz = Convert.ToDouble(dataGridView5.Rows[4].Cells[2].Value); //45.0;

            double[] distanceOffset1 = new double[1] { 0.5 * Len_of_InnerEdge_Ap + Height_Hz *100/Slope_IT };
            //45/33.33% = 135.135
            double[] intercept_parallel = new double[10];
            double a, b, x1, y1, x2, y2;
            string[] IT_Line_Name = new string[2] { "IT_AD", "IT_BC" };

            int DGV2_row_inx, DGV1_row_inx, i, intrcpt;
            int a1, a2;
            slope1 = Convert.ToDouble(dataGridView2.Rows[4].Cells["ColSlope"].Value);//EF
            double tempslope;
            tempslope = Math.Atan(slope1);
            if (tempslope >= 0)
            {
                a1 = -1;
                a2 = 1;
            }
            else
            {
                a1 = 1;
                a2 = -1;
            }
            int[] mulfactor = new int[2] { a1, a2 };//1 for T_AD and -1 for T_BC
            int[] RW_Side = new int[1] { 4 };//EF


            intrcpt = 0;
            DGV2_row_inx = 51; //for IT_AB and end at index 52 for IT_BC
            for (int j = 0; j <= 1; j++)
            {
                slope1 = Convert.ToDouble(dataGridView2.Rows[RW_Side[0]].Cells["ColSlope"].Value);//EF
                intercept1 = Convert.ToDouble(dataGridView2.Rows[RW_Side[0]].Cells["ColIntercept"].Value);//EF

                for (int k = 0; k <= 0; k++)
                {
                    //For IT_DE--->RWY 28 side
                    distanceOffset = distanceOffset1[k];
                    intercept_parallel[intrcpt] = Intercept_of_Parallel_line(slope1, intercept1, distanceOffset, mulfactor[j]);
                    dataGridView2.Rows[DGV2_row_inx].Cells["ColLine"].Value = IT_Line_Name[intrcpt];
                    dataGridView2.Rows[DGV2_row_inx].Cells["ColSlope"].Value = slope1.ToString();
                    dataGridView2.Rows[DGV2_row_inx].Cells["ColIntercept"].Value = intercept_parallel[intrcpt].ToString();

                    DGV2_row_inx++;
                    intrcpt++;
                }
            }

            //Find intersection point IT_A, IT_D, IT_B, IT_C
            //Point of intersection of circle and line
            double Quad_x_plus, Quad_x_minus, Quad_y_plus, Quad_y_minus;
            double dist;
            double slope2, intercept2;
            double[] IT_COORD_X = new double[12];
            double[] IT_COORD_Y = new double[12];
            string[] IT_Point_Name = new string[4] { "IT_A", "IT_D", "IT_B", "IT_C" };
            double[] latlong1 = new double[2];
            int[,] indx = new int[2, 2] { { 13, 15 }, { 14, 16 } };

            DGV1_row_inx = 66;//for IT_A and end at index 69 for IT_J
            //PtIndex = 0;
            i = 0;
            intrcpt = 0;

            for (int j = 0; j <= 1; j++)
            {
                intercept1 = intercept_parallel[j]; //intercept of IT_AB i.e. parallel line
                slope1 = Convert.ToDouble(dataGridView2.Rows[4].Cells["ColSlope"].Value);//EF

                for (int k = 0; k <= 1; k++)
                {
                    slope2 = Convert.ToDouble(dataGridView2.Rows[indx[j, k]].Cells["ColSlope"].Value);//slope
                    intercept2 = Convert.ToDouble(dataGridView2.Rows[indx[j, k]].Cells["ColIntercept"].Value);//intercept                                                                                                //For Point IT_A and IT_B

                    a = Find_Intersection_X(slope1, intercept1, slope2, intercept2);//X-COORD of intersection of EF and IJ
                    b = Find_Intersection_Y(slope1, intercept1, slope2, intercept2);//Y-COORD of intersection of EF and IJ

                    //COORD IT_A
                    IT_COORD_X[i] = a;
                    IT_COORD_Y[i] = b;
                    //COORD IT_B
                    //IT_COORD_X[i + 1] = Quad_x_minus;
                    //IT_COORD_Y[i + 1] = Quad_y_minus;


                    latlong1 = Convert_UTM_To_Latitude_Longitude(a, b);
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColPoint"].Value = IT_Point_Name[i].ToString();
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColLatitude"].Value = latlong1[0].ToString();
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColLongitude"].Value = latlong1[1].ToString();
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColEasting"].Value = a.ToString();
                    dataGridView1.Rows[DGV1_row_inx].Cells["ColNorthing"].Value = b.ToString();

                    DGV1_row_inx++;
                    i++;
                    intrcpt++;
                }

            }

            //distance between two points
            DGV2_row_inx = 51;
            for (int k = 0; k <= 3; k += 2)
            {
                Quad_x_plus = IT_COORD_X[k];
                Quad_y_plus = IT_COORD_Y[k];

                Quad_x_minus = IT_COORD_X[k + 1];
                Quad_y_minus = IT_COORD_Y[k + 1];

                dist = Find_Distance_bet_two_pointXY(Quad_x_plus, Quad_y_plus, Quad_x_minus, Quad_y_minus);
                dataGridView2.Rows[DGV2_row_inx].Cells[3].Value = dist.ToString();
                DGV2_row_inx++;

            }
        }